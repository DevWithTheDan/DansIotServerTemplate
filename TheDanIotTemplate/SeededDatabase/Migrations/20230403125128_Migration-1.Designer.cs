// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeededDatabase.Context;

#nullable disable

namespace SeededDatabase.Migrations
{
    [DbContext(typeof(SeededDatabaseContext))]
    [Migration("20230403125128_Migration-1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SeededDatabase.Models.CalculationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Data")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CalculationData");
                });

            modelBuilder.Entity("SeededDatabase.Models.CalculationReference", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CalculationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNegativeOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPositiveOnly")
                        .HasColumnType("bit");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CalculationReferences");
                });

            modelBuilder.Entity("SeededDatabase.Models.FrontendGauge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("EndAngle")
                        .HasColumnType("float");

                    b.Property<int>("GaugeTickPosition")
                        .HasColumnType("int");

                    b.Property<int>("HeightPx")
                        .HasColumnType("int");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("Min")
                        .HasColumnType("float");

                    b.Property<double>("StartAngle")
                        .HasColumnType("float");

                    b.Property<double>("Step")
                        .HasColumnType("float");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WidthPx")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FrontendGauges");
                });
#pragma warning restore 612, 618
        }
    }
}
